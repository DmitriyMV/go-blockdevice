// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Code generated by "cstruct -pkg vfat -struct VFATSB -input vfat.h -endianness LittleEndian"; DO NOT EDIT.

package vfat

import "encoding/binary"

var _ = binary.LittleEndian

// VFATSB is a byte slice representing the vfat.h C header.
type VFATSB []byte

// Get_vs_ignored returns vs_ignored.
func (s VFATSB) Get_vs_ignored() []byte {
	return s[0:3]
}

// Get_vs_sysid returns vs_sysid.
func (s VFATSB) Get_vs_sysid() []byte {
	return s[3:11]
}

// Get_vs_sector_size returns vs_sector_size.
func (s VFATSB) Get_vs_sector_size() []byte {
	return s[11:13]
}

// Get_vs_cluster_size returns vs_cluster_size.
func (s VFATSB) Get_vs_cluster_size() byte {
	return s[13]
}

// Get_vs_reserved returns vs_reserved.
func (s VFATSB) Get_vs_reserved() uint16 {
	return binary.LittleEndian.Uint16(s[14:16])
}

// Get_vs_fats returns vs_fats.
func (s VFATSB) Get_vs_fats() byte {
	return s[16]
}

// Get_vs_dir_entries returns vs_dir_entries.
func (s VFATSB) Get_vs_dir_entries() []byte {
	return s[17:19]
}

// Get_vs_sectors returns vs_sectors.
func (s VFATSB) Get_vs_sectors() []byte {
	return s[19:21]
}

// Get_vs_media returns vs_media.
func (s VFATSB) Get_vs_media() byte {
	return s[21]
}

// Get_vs_fat_length returns vs_fat_length.
func (s VFATSB) Get_vs_fat_length() uint16 {
	return binary.LittleEndian.Uint16(s[22:24])
}

// Get_vs_secs_track returns vs_secs_track.
func (s VFATSB) Get_vs_secs_track() uint16 {
	return binary.LittleEndian.Uint16(s[24:26])
}

// Get_vs_heads returns vs_heads.
func (s VFATSB) Get_vs_heads() uint16 {
	return binary.LittleEndian.Uint16(s[26:28])
}

// Get_vs_hidden returns vs_hidden.
func (s VFATSB) Get_vs_hidden() uint32 {
	return binary.LittleEndian.Uint32(s[28:32])
}

// Get_vs_total_sect returns vs_total_sect.
func (s VFATSB) Get_vs_total_sect() uint32 {
	return binary.LittleEndian.Uint32(s[32:36])
}

// Get_vs_fat32_length returns vs_fat32_length.
func (s VFATSB) Get_vs_fat32_length() uint32 {
	return binary.LittleEndian.Uint32(s[36:40])
}

// Get_vs_flags returns vs_flags.
func (s VFATSB) Get_vs_flags() uint16 {
	return binary.LittleEndian.Uint16(s[40:42])
}

// Get_vs_version returns vs_version.
func (s VFATSB) Get_vs_version() []byte {
	return s[42:44]
}

// Get_vs_root_cluster returns vs_root_cluster.
func (s VFATSB) Get_vs_root_cluster() uint32 {
	return binary.LittleEndian.Uint32(s[44:48])
}

// Get_vs_fsinfo_sector returns vs_fsinfo_sector.
func (s VFATSB) Get_vs_fsinfo_sector() uint16 {
	return binary.LittleEndian.Uint16(s[48:50])
}

// Get_vs_backup_boot returns vs_backup_boot.
func (s VFATSB) Get_vs_backup_boot() uint16 {
	return binary.LittleEndian.Uint16(s[50:52])
}

// Get_vs_drive_number returns vs_drive_number.
func (s VFATSB) Get_vs_drive_number() byte {
	return s[76]
}

// Get_vs_boot_flags returns vs_boot_flags.
func (s VFATSB) Get_vs_boot_flags() byte {
	return s[77]
}

// Get_vs_ext_boot_sign returns 0x28 - without vs_label/vs_magic; 0x29 - with.
func (s VFATSB) Get_vs_ext_boot_sign() byte {
	return s[78]
}

// Get_vs_serno returns vs_serno.
func (s VFATSB) Get_vs_serno() []byte {
	return s[79:83]
}

// Get_vs_label returns vs_label.
func (s VFATSB) Get_vs_label() []byte {
	return s[83:94]
}

// Get_vs_magic returns vs_magic.
func (s VFATSB) Get_vs_magic() []byte {
	return s[94:102]
}

// Get_vs_dummy2 returns vs_dummy2.
func (s VFATSB) Get_vs_dummy2() []byte {
	return s[102:522]
}

// Get_vs_pmagic returns vs_pmagic.
func (s VFATSB) Get_vs_pmagic() []byte {
	return s[522:524]
}

// VFATSB_SIZE is the size of the VFATSB struct.
const VFATSB_SIZE = 524
