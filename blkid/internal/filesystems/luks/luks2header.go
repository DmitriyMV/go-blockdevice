// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Code generated by "cstruct -pkg luks -struct Luks2Header -input luks2_header.h -endianness BigEndian"; DO NOT EDIT.

package luks

import "encoding/binary"

var _ = binary.BigEndian

// Luks2Header is a byte slice representing the luks2_header.h C header.
type Luks2Header []byte

// Get_magic returns magic.
func (s Luks2Header) Get_magic() []byte {
	return s[0:6]
}

// Get_version returns version.
func (s Luks2Header) Get_version() uint16 {
	return binary.BigEndian.Uint16(s[6:8])
}

// Get_hdr_size returns in bytes, including JSON area.
func (s Luks2Header) Get_hdr_size() uint64 {
	return binary.BigEndian.Uint64(s[8:16])
}

// Get_seqid returns increased on every update.
func (s Luks2Header) Get_seqid() uint64 {
	return binary.BigEndian.Uint64(s[16:24])
}

// Get_label returns label.
func (s Luks2Header) Get_label() []byte {
	return s[24:72]
}

// Get_checksum_alg returns checksum_alg.
func (s Luks2Header) Get_checksum_alg() []byte {
	return s[72:104]
}

// Get_salt returns unique for every header/offset.
func (s Luks2Header) Get_salt() []byte {
	return s[104:168]
}

// Get_uuid returns uuid.
func (s Luks2Header) Get_uuid() []byte {
	return s[168:208]
}

// Get_subsystem returns owner subsystem label.
func (s Luks2Header) Get_subsystem() []byte {
	return s[208:256]
}

// Get_hdr_offset returns offset from device start in bytes.
func (s Luks2Header) Get_hdr_offset() uint64 {
	return binary.BigEndian.Uint64(s[256:264])
}

// Get__padding returns _padding.
func (s Luks2Header) Get__padding() []byte {
	return s[264:448]
}

// Get_csum returns csum.
func (s Luks2Header) Get_csum() []byte {
	return s[448:512]
}

// LUKS2HEADER_SIZE is the size of the Luks2Header struct.
const LUKS2HEADER_SIZE = 512
