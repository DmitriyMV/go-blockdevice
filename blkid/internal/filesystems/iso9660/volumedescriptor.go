// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Code generated by "cstruct -pkg iso9660 -struct VolumeDescriptor -input volume.h -endianness NativeEndian"; DO NOT EDIT.

package iso9660

import "encoding/binary"

var _ = binary.NativeEndian

// VolumeDescriptor is a byte slice representing the volume.h C header.
type VolumeDescriptor []byte

// Get_vd_type returns vd_type.
func (s VolumeDescriptor) Get_vd_type() byte {
	return s[0]
}

// Get_vd_id returns vd_id.
func (s VolumeDescriptor) Get_vd_id() []byte {
	return s[1:6]
}

// Get_vd_version returns vd_version.
func (s VolumeDescriptor) Get_vd_version() byte {
	return s[6]
}

// Get_flags returns flags.
func (s VolumeDescriptor) Get_flags() byte {
	return s[7]
}

// Get_system_id returns system_id.
func (s VolumeDescriptor) Get_system_id() []byte {
	return s[8:40]
}

// Get_volume_id returns volume_id.
func (s VolumeDescriptor) Get_volume_id() []byte {
	return s[40:72]
}

// Get_unused returns unused.
func (s VolumeDescriptor) Get_unused() []byte {
	return s[72:80]
}

// Get_space_size returns space_size.
func (s VolumeDescriptor) Get_space_size() []byte {
	return s[80:88]
}

// Get_escape_sequences returns escape_sequences.
func (s VolumeDescriptor) Get_escape_sequences() []byte {
	return s[88:120]
}

// Get_set_size returns set_size.
func (s VolumeDescriptor) Get_set_size() []byte {
	return s[120:124]
}

// Get_vol_seq_num returns vol_seq_num.
func (s VolumeDescriptor) Get_vol_seq_num() []byte {
	return s[124:128]
}

// Get_logical_block_size returns logical_block_size.
func (s VolumeDescriptor) Get_logical_block_size() []byte {
	return s[128:132]
}

// Get_path_table_size returns path_table_size.
func (s VolumeDescriptor) Get_path_table_size() []byte {
	return s[132:140]
}

// Get_type_l_path_table returns type_l_path_table.
func (s VolumeDescriptor) Get_type_l_path_table() []byte {
	return s[140:144]
}

// Get_opt_type_l_path_table returns opt_type_l_path_table.
func (s VolumeDescriptor) Get_opt_type_l_path_table() []byte {
	return s[144:148]
}

// Get_type_m_path_table returns type_m_path_table.
func (s VolumeDescriptor) Get_type_m_path_table() []byte {
	return s[148:152]
}

// Get_opt_type_m_path_table returns opt_type_m_path_table.
func (s VolumeDescriptor) Get_opt_type_m_path_table() []byte {
	return s[152:156]
}

// Get_root_dir_record returns root_dir_record.
func (s VolumeDescriptor) Get_root_dir_record() []byte {
	return s[156:190]
}

// Get_volume_set_id returns volume_set_id.
func (s VolumeDescriptor) Get_volume_set_id() []byte {
	return s[190:318]
}

// Get_publisher_id returns publisher_id.
func (s VolumeDescriptor) Get_publisher_id() []byte {
	return s[318:446]
}

// Get_data_preparer_id returns data_preparer_id.
func (s VolumeDescriptor) Get_data_preparer_id() []byte {
	return s[446:574]
}

// Get_application_id returns application_id.
func (s VolumeDescriptor) Get_application_id() []byte {
	return s[574:702]
}

// Get_copyright_file_id returns copyright_file_id.
func (s VolumeDescriptor) Get_copyright_file_id() []byte {
	return s[702:739]
}

// Get_abstract_file_id returns abstract_file_id.
func (s VolumeDescriptor) Get_abstract_file_id() []byte {
	return s[739:776]
}

// Get_bibliographic_file_id returns bibliographic_file_id.
func (s VolumeDescriptor) Get_bibliographic_file_id() []byte {
	return s[776:813]
}

// Get_created returns created.
func (s VolumeDescriptor) Get_created() []byte {
	return s[813:830]
}

// Get_modified returns modified.
func (s VolumeDescriptor) Get_modified() []byte {
	return s[830:847]
}

// Get_expiration returns expiration.
func (s VolumeDescriptor) Get_expiration() []byte {
	return s[847:864]
}

// Get_effective returns effective.
func (s VolumeDescriptor) Get_effective() []byte {
	return s[864:881]
}

// Get_std_version returns std_version.
func (s VolumeDescriptor) Get_std_version() byte {
	return s[881]
}

// VOLUMEDESCRIPTOR_SIZE is the size of the VolumeDescriptor struct.
const VOLUMEDESCRIPTOR_SIZE = 882
